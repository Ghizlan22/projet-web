from fastapi import FastAPI, File, UploadFile, Form
from fastapi.responses import JSONResponse
from transformers import pipeline
import tempfile
import os
import fitz  # PyMuPDF
import docx
import pandas as pd
import pptx
from fastapi.middleware.cors import CORSMiddleware
from langdetect import detect  # Détection de langue

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Modèles de traduction (ajout de plus de langues)
translation_models = {
    "fr-en": "Helsinki-NLP/opus-mt-fr-en",
    "en-fr": "Helsinki-NLP/opus-mt-en-fr",
    "fr-de": "Helsinki-NLP/opus-mt-fr-de",
    "fr-es": "Helsinki-NLP/opus-mt-fr-es",
    "de-en": "Helsinki-NLP/opus-mt-de-en",
    "es-en": "Helsinki-NLP/opus-mt-es-en",
    "it-en": "Helsinki-NLP/opus-mt-it-en",
    "zh-en": "Helsinki-NLP/opus-mt-zh-en",
    "en-it": "Helsinki-NLP/opus-mt-en-it",
    "en-zh": "Helsinki-NLP/opus-mt-en-zh",
    "de-fr": "Helsinki-NLP/opus-mt-de-fr",
    "es-fr": "Helsinki-NLP/opus-mt-es-fr",
    "it-fr": "Helsinki-NLP/opus-mt-it-fr",
    "zh-fr": "Helsinki-NLP/opus-mt-zh-fr",
    "en-es": "Helsinki-NLP/opus-mt-en-es",
    "fr-ar": "Helsinki-NLP/opus-mt-fr-ar",
    "en-de": "Helsinki-NLP/opus-mt-en-de",



}
def extract_text_from_pdf(file_path):
    text = ""
    with fitz.open(file_path) as doc:
        for page in doc:
            text += page.get_text("text") + "\n"
    return text

def extract_text_from_docx(file_path):
    doc = docx.Document(file_path)
    return "\n".join([p.text for p in doc.paragraphs])

def extract_text_from_pptx(file_path):
    presentation = pptx.Presentation(file_path)
    text = []
    for slide in presentation.slides:
        for shape in slide.shapes:
            if hasattr(shape, "text"):
                text.append(shape.text)
    return "\n".join(text)

def extract_text_from_excel(file_path):
    df = pd.read_excel(file_path, engine="openpyxl")
    return df.to_string(index=False)

# Fonction pour diviser le texte en morceaux
def chunk_text(text, max_length=512):
    words = text.split()
    chunks = []
    current_chunk = []

    for word in words:
        if len(" ".join(current_chunk) + " " + word) <= max_length:
            current_chunk.append(word)
        else:
            chunks.append(" ".join(current_chunk))
            current_chunk = [word]

    if current_chunk:
        chunks.append(" ".join(current_chunk))

    return chunks

# Fonction pour traduire le texte
def translate_text(text, source_lang, target_lang):
    model_key = f"{source_lang}-{target_lang}"
    
    if model_key in translation_models:
        model_name = translation_models[model_key]
        translator = pipeline("translation", model=model_name)
        translated_chunks = [translator(chunk)[0]["translation_text"] for chunk in chunk_text(text)]
        return " ".join(translated_chunks)

    # Si pas de traduction directe, utiliser l'anglais comme pivot (intermédiaire)
    model_to_en = f"{source_lang}-en"
    model_from_en = f"en-{target_lang}"

    if model_to_en in translation_models and model_from_en in translation_models:
        translator_to_en = pipeline("translation", model=translation_models[model_to_en])
        translator_from_en = pipeline("translation", model=translation_models[model_from_en])

        intermediate_texts = [translator_to_en(chunk)[0]["translation_text"] for chunk in chunk_text(text)]
        intermediate_text = " ".join(intermediate_texts)

        final_texts = [translator_from_en(chunk)[0]["translation_text"] for chunk in chunk_text(intermediate_text)]
        return " ".join(final_texts)

    return None  # Pas de modèle disponible

@app.post("/translate")
async def translate_document(file: UploadFile = File(...), language: str = Form(...)):
    try:
        suffix = file.filename.split(".")[-1].lower()
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=f".{suffix}")
        temp_file.write(await file.read())
        temp_file.close()

        if suffix == "pdf":
            text = extract_text_from_pdf(temp_file.name)
        elif suffix == "docx":
            text = extract_text_from_docx(temp_file.name)
        elif suffix == "pptx":
            text = extract_text_from_pptx(temp_file.name)
        elif suffix in ["xls", "xlsx"]:
            text = extract_text_from_excel(temp_file.name)
        else:
            return JSONResponse({"error": "Format de fichier non supporté"}, status_code=400)

        os.remove(temp_file.name)

        if not text.strip():
            return JSONResponse({"error": "Aucun texte détecté"}, status_code=400)

        detected_lang = detect(text)
        print(f"Langue détectée : {detected_lang} | Langue cible : {language}")

        if detected_lang == language:
            return JSONResponse({"translation": text, "note": "Le texte est déjà dans la langue sélectionnée."})

        translated_text = translate_text(text, detected_lang, language)

        if translated_text:
            return JSONResponse({"translation": translated_text})
        else:
            return JSONResponse({"error": f"Aucun modèle trouvé pour la traduction {detected_lang} → {language}"}, status_code=400)

    except Exception as e:
        return JSONResponse({"error": str(e)}, status_code=500)

